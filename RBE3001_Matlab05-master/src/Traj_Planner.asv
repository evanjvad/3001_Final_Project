classdef Traj_Planner
    properties
       pp;
       xy_Height = 100;
       z_Adjustment_Height = 13;
       
       time_Step = 0.01;
       total_Time = 0.5;
    end
    
    methods
        function obj = Traj_Planner(pp)
            obj.pp = pp;
        end
        %Lab 3 Method 2:
        function cubic = cubic_traj(~, t0, tf, v0, vf, q0, qf)
            %Creates the polynomial functions matrix A, in which case its
            %inverse will be multiplied with the array of prospective
            %positions and velocities based on the degree of each
            %polynomial.
            A = [1  (t0) (t0)^2   (t0)^3;
                 0  1  (2*t0)   (3*(t0)^2);
                 1  tf (tf)^2   (tf)^3;
                 0  1  (2*(tf))   (3*(tf)^2)];
            
            b = [q0; v0; qf; vf];
            
            cubic = inv(A) * b;
        end 
        
        function quintic = quintic_traj(~, t0,tf,v0,vf,q0,qf)
            %Our polynomial becomes a 5 degree polynomial where the
            %derivative is taken twice. Once for velocity and a second time
            %for acceleration.
            A = [1  t0 (t0)^2     (t0)^3         (t0)^4         (t0)^5;
                 0  1  2*(t0)     3*((t0)^2)     4*((t0)^3)     5*((t0)^4);
                 0  0  2          6*(t0)         12*((t0)^2)    20*((t0)^3);
                 1  tf (tf)^2     (tf)^3         (tf)^4         (tf)^5;
                 0  1  2*(tf)     3*((tf)^2)     4*((tf)^3)     5*((tf)^4);
                 0  0  2          6*(tf)         12*((tf)^2)    20*((tf)^3);];
             
            b = [q0; v0; 0; qf; vf; 0];
             
             quintic = inv(A) * b;
        end
        
        %calculates the current joint set point based on the trajectory
        function q = q_value(~,a_coef, t)
            q = a_coef(1) + a_coef(2)*t + a_coef(3)*t^2 + a_coef(4)*t^3;
        end
        
        function linear = linear_traj(~, t0,tf,q0,qf)
           %Takes out the velocity values to create a linear polynomial and
           %cubic_traj can be used to do the mathmatics behind it.
            A = [1  (t0) (t0)^2   (t0)^3;
                 0  1  (2*t0)   (3*(t0)^2);
                 1  tf (tf)^2   (tf)^3;
                 0  1  (2*(tf))   (3*(tf)^2)];
            
            b = [q0; 0; qf; 0];
            
            linear = inv(A) * b;        
        end
        
        function move_To_Position(obj, points)
            points(2,:) = points(1,:);
            points(1,:) = obj.pp.position_cp();
            i = 1;
            initial_time = 0:obj.time_Step:obj.total_Time;

            syms t;

                x_coeff = obj.quintic_traj(0,obj.total_Time,0,0,points(i,1),points(i+1,1));
                y_coeff = obj.quintic_traj(0,obj.total_Time,0,0,points(i,2),points(i+1,2));
                z_coeff = obj.quintic_traj(0,obj.total_Time,0,0,points(i,3),points(i+1,3));

                qx = x_coeff(1) + x_coeff(2)*t + x_coeff(3)*(t^2) + x_coeff(4)*(t^3) + x_coeff(5)*(t^4) + x_coeff(6)*(t^5);
                qy = y_coeff(1) + y_coeff(2)*t + y_coeff(3)*(t^2) + y_coeff(4)*(t^3) + y_coeff(5)*(t^4) + y_coeff(6)*(t^5);
                qz = z_coeff(1) + z_coeff(2)*t + z_coeff(3)*(t^2) + z_coeff(4)*(t^3) + z_coeff(5)*(t^4) + z_coeff(6)*(t^5);

                x_Position = subs(qx,t,initial_time);
                y_Position = subs(qy,t,initial_time);
                z_Position = subs(qz,t,initial_time);

                for j=1:(size(x_Position,2))-1
                    packet = [x_Position(j),y_Position(j),z_Position(j)];
                    angles = obj.pp.ik3001(packet);
                    obj.pp.interpolate_jp(angles,5);
                    pause(obj.time_Step)
                end
        end
        
        function move_To_Z(obj, end_Point, isGrabbing)
            points(1,:) = obj.pp.position_cp();
            points(2,:) = end_Point(1,:);
            points(3,:) = points(1,:);
            points(4,:) = points(1,:);
            initial_Time = 0:obj.time_Step:obj.total_Time;
            
            if isGrabbing
                obj.pp.openGripper();
            else
                obj.pp.closeGripper();
            end

            syms t;
            for i=1:size(points)-1

                x_coeff = obj.quintic_traj(0,obj.total_Time,0,0,points(i,1),points(i+1,1));
                y_coeff = obj.quintic_traj(0,obj.total_Time,0,0,points(i,2),points(i+1,2));
                z_coeff = obj.quintic_traj(0,obj.total_Time,0,0,points(i,3),points(i+1,3));

                %Calcuating position equations:
                qx = x_coeff(1) + x_coeff(2)*t + x_coeff(3)*(t^2) + x_coeff(4)*(t^3) + x_coeff(5)*(t^4) + x_coeff(6)*(t^5);
                qy = y_coeff(1) + y_coeff(2)*t + y_coeff(3)*(t^2) + y_coeff(4)*(t^3) + y_coeff(5)*(t^4) + y_coeff(6)*(t^5);
                qz = z_coeff(1) + z_coeff(2)*t + z_coeff(3)*(t^2) + z_coeff(4)*(t^3) + z_coeff(5)*(t^4) + z_coeff(6)*(t^5);

                x_position = subs(qx,t,initial_Time);
                y_position = subs(qy,t,initial_Time);
                z_position = subs(qz,t,initial_Time);

                for j=1:(size(x_position,2))-1
                    packet = [x_position(j),y_position(j),z_position(j)];
                    angles = obj.pp.ik3001(packet);
                    obj.pp.interpolate_jp(angles,5);
                    pause(obj.time_Step)
                end 
                if isGrabbing
                    obj.pp.closeGripper();
                else
                    obj.pp.openGripper();
                end
            end
            disp(obj.pp.position_cp());
        end
        
        function placement(obj, start_Point, end_Point)
           %% Movement to the first position
            xy_move = [start_Point(1:2) obj.xy_Height];
            move_To_Z = [start_Point(1:2) obj.z_Adjustment_Height];
            obj.move_To_Position(xy_move);
            obj.move_To_Z(move_To_Z, true);
            
            %% Move to the second position
            xy_move = [end_Point(1:2) obj.xy_Height];
            move_To_Z = [end_Point(1:2) obj.z_Adjustment_Height];
            obj.move_To_Position(xy_move);
            obj.move_To_Z(move_To_Z, false);
        end
        
        function home_Orientation(obj)
           transform = obj.pp.fk3001([0 0 0]);
           points = [transform(1,4) transform(2,4) transform(3,4)];
           obj.move_To_Position(points);
        end
    end
end